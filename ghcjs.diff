--- a/ghcjs.cabal
+++ b/ghcjs.cabal
@@ -141,7 +141,7 @@
                    mtl,
                    ghc-paths,
                    template-haskell,
-                   syb            >= 0.6      && < 0.7,
+                   syb            >= 0.6      && < 0.8,
                    bytestring     >= 0.10     && < 0.11,
                    attoparsec     >= 0.12     && < 0.14,
                    aeson          >= 0.7      && < 0.12,
@@ -154,7 +154,7 @@
                    transformers,
                    split          >= 0.2      && < 0.3,
                    deepseq,
-                   vector         >= 0.10     && < 0.12,
+                   vector         >= 0.10     && < 0.13,
                    data-default   >= 0.7      && < 0.8,
                    array          >= 0.4      && < 0.6,
                    binary         >= 0.7      && < 0.9,
@@ -172,7 +172,7 @@
                    safe                       >= 0.3  && < 0.4,
                    parsec                     >= 3.1  && < 3.2,
                    haskell-src-exts           >= 1.16 && < 1.19,
-                   haskell-src-meta           >= 0.6.0.3  && < 0.8
+                   haskell-src-meta           >= 0.6.0.3  && < 0.9
     exposed: True
     buildable: True
     hs-source-dirs: src lib/ghcjs-prim
@@ -276,13 +276,13 @@
                       text                 >= 0.11   && < 1.3,
                       bytestring           >= 0.10   && < 0.11,
                       system-filepath      >= 0.4    && < 0.5,
-                      shelly               >= 1.5    && < 1.7,
+                      shelly               >= 1.5    && < 1.6.8.5,
                       system-fileio        >= 0.3    && < 0.4,
                       optparse-applicative >= 0.11   && < 0.13,
                       tar                  >= 0.5    && < 0.6,
                       HTTP                 >= 4000.2 && < 5000,
                       yaml                 >= 0.8    && < 0.9,
-                      process              >= 1.2    && < 1.5,
+                      process              >= 1.2    && < 1.7,
                       time                 >= 1.4    && < 1.7,
                       unix-compat          >= 0.4    && < 0.5,
                       executable-path      >= 0      && < 0.1
@@ -344,7 +344,7 @@
                       bytestring,
                       deepseq,
                       unordered-containers,
-                      shelly               >= 1.5 &&  < 1.7,
+                      shelly               >= 1.5 &&  < 1.6.8.5,
                       data-default         >= 0.7 &&  < 0.8,
                       yaml                 >= 0.8 &&  < 0.9,
                       optparse-applicative,
--- a/src-bin/Boot.hs	2017-11-11 10:15:50.945621443 -0800
+++ b/src-bin/Boot.hs	2017-11-11 10:16:21.869975253 -0800
@@ -600,7 +600,7 @@
       branch' <- view (beSources . branch)
       sub $ do
         cd repoName
-        git_ ["checkout", branch']
+        git_ ("checkout" : T.words branch')
     cloneGitSrcs d [] = failWith ("could not clone " <> d <> ", no available sources")
     cloneGitSrcs d (x:xs) = git_ ["clone", x] `catchAny_`
       (msgD warn "clone failed, trying next source" >> cloneGitSrcs d xs)
@@ -1140,8 +1140,14 @@ cabalStage1 pkgs = sub $ do
                 ]
   globalFlags <- cabalGlobalFlags
   flags <- cabalInstallFlags (length pkgs == 1)
-  let args = globalFlags ++ ("install" : pkgs) ++
-             [ "--allow-boot-library-installs"
+  let args = globalFlags ++ ("install" : pkgs) ++ [
+-- We can't build cabal-install-2 without Cabal-2, so avoid cabal-install-2
+-- features in that case.
+#if MIN_VERSION_Cabal(2,0,0)
+               "--allow-boot-library-installs"
+#else
+               "--solver=topdown" -- the modular solver refuses to install stage1 packages
+#endif
              ] ++ map ("--configure-option="<>) configureOpts ++ flags
   checkInstallPlan pkgs args
   cabal_ args
@@ -1162,7 +1168,11 @@ cabalInstall pkgs = do
 -- uses somewhat fragile parsing of --dry-run output, find a better way
 checkInstallPlan :: [Package] -> [Text] -> B ()
 checkInstallPlan pkgs opts = do
+#if MIN_VERSION_Cabal(2,0,0)
   plan <- cabal (opts ++ ["-vverbose+nowrap", "--dry-run"])
+#else
+  plan <- cabal (opts ++ ["-v2", "--dry-run"])
+#endif
   when (hasReinstalls plan || hasUnexpectedInstalls plan || hasNewVersion plan) (err plan)
   where
     hasReinstalls = T.isInfixOf "(reinstall)"   -- reject reinstalls
@@ -1504,8 +1514,10 @@ checkCabalSupport bs pgms = do
   cbl <- run' bs (pgms ^. bpCabal) ["install", "--help"]
   when (not $ "--ghcjs" `T.isInfixOf` cbl) $
     failWith ("cabal-install program " <> pgms ^. bpCabal . pgmLocText <> " does not support GHCJS")
+#if MIN_VERSION_Cabal(2,0,0)
   when (not $ "--allow-boot-library-installs" `T.isInfixOf` cbl) $
     failWith ("cabal-install program " <> pgms ^. bpCabal . pgmLocText <> " does not support --allow-boot-library-installs (requires version 2.0.0.0 or newer)")
+#endif
   void (run' bs (pgms ^. bpGhc) ["-e", "either error id (Text.Read.readEither \"GHCJS\" :: Either String Distribution.Simple.CompilerFlavor)"]) `Ex.catch`
     \(Ex.SomeException _) -> failWith
        ("GHC program " <> pgms ^. bpGhc . pgmLocText <> " does not have a Cabal library that supports GHCJS\n" <>
